# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..core.pydantic_utilities import parse_obj_as
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.model_result_info import ModelResultInfo
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.model_result_masked import ModelResultMasked
from ..core.client_wrapper import AsyncClientWrapper


class ResultsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_percentage_increase(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, float]:
        """
        Get the percentage increase in the number of model results created by a user
        last week compared to the week before.

        Args:
        database: The database session.
        user: The user.

        Returns:
        The percentage increase.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, float]
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.get_percentage_increase()
        """
        _response = self._client_wrapper.httpx_client.request(
            "results/percentage-increase",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, float],
                    parse_obj_as(
                        type_=typing.Dict[str, float],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_model_result_count(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, int]:
        """
        Get the total number of ModelResult belonging to a user.

        Args:
        database: The database session.
        user: The user.

        Returns:
        A dictionary containing the count of ModelResult.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, int]
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.get_model_result_count()
        """
        _response = self._client_wrapper.httpx_client.request(
            "results/count",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, int],
                    parse_obj_as(
                        type_=typing.Dict[str, int],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def model_info(
        self,
        model_result_id: int,
        *,
        dark_mode: typing.Optional[bool] = None,
        include_plot: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelResultInfo:
        """
        Get a model result by ID.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        The model result and optionally the plotly JSON.

        Parameters
        ----------
        model_result_id : int

        dark_mode : typing.Optional[bool]

        include_plot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResultInfo
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.model_info(
            model_result_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}",
            method="GET",
            params={
                "dark_mode": dark_mode,
                "include_plot": include_plot,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelResultInfo,
                    parse_obj_as(
                        type_=ModelResultInfo,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_model_result(
        self, model_result_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a model result by ID.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        None.

        Parameters
        ----------
        model_result_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.delete_model_result(
            model_result_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all_models_results(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResultMasked]:
        """
        Get all model results.

        Args:
        skip: Number of model results to skip.
        limit: Number of model results to return.

        Returns:
        List of model results.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResultMasked]
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.get_all_models_results()
        """
        _response = self._client_wrapper.httpx_client.request(
            "results",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ModelResultMasked],
                    parse_obj_as(
                        type_=typing.List[ModelResultMasked],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def download_model_result(
        self, model_result_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Download a model result as a JSON file zipped with the input file from GCS.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        The zipped file as bytes.

        Parameters
        ----------
        model_result_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from conductor_quantum import ConductorQuantum

        client = ConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.results.download_model_result(
            model_result_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}/download",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncResultsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_percentage_increase(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, float]:
        """
        Get the percentage increase in the number of model results created by a user
        last week compared to the week before.

        Args:
        database: The database session.
        user: The user.

        Returns:
        The percentage increase.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, float]
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.get_percentage_increase()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "results/percentage-increase",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, float],
                    parse_obj_as(
                        type_=typing.Dict[str, float],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_model_result_count(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, int]:
        """
        Get the total number of ModelResult belonging to a user.

        Args:
        database: The database session.
        user: The user.

        Returns:
        A dictionary containing the count of ModelResult.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, int]
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.get_model_result_count()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "results/count",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, int],
                    parse_obj_as(
                        type_=typing.Dict[str, int],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def model_info(
        self,
        model_result_id: int,
        *,
        dark_mode: typing.Optional[bool] = None,
        include_plot: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelResultInfo:
        """
        Get a model result by ID.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        The model result and optionally the plotly JSON.

        Parameters
        ----------
        model_result_id : int

        dark_mode : typing.Optional[bool]

        include_plot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResultInfo
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.model_info(
                model_result_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}",
            method="GET",
            params={
                "dark_mode": dark_mode,
                "include_plot": include_plot,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelResultInfo,
                    parse_obj_as(
                        type_=ModelResultInfo,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_model_result(
        self, model_result_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a model result by ID.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        None.

        Parameters
        ----------
        model_result_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.delete_model_result(
                model_result_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all_models_results(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResultMasked]:
        """
        Get all model results.

        Args:
        skip: Number of model results to skip.
        limit: Number of model results to return.

        Returns:
        List of model results.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResultMasked]
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.get_all_models_results()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "results",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ModelResultMasked],
                    parse_obj_as(
                        type_=typing.List[ModelResultMasked],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def download_model_result(
        self, model_result_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Download a model result as a JSON file zipped with the input file from GCS.

        Args:
        model_result_id: The ID of the model result.
        database: The database session.
        user: The user.

        Returns:
        The zipped file as bytes.

        Parameters
        ----------
        model_result_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from conductor_quantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.results.download_model_result(
                model_result_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"results/{jsonable_encoder(model_result_id)}/download",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
